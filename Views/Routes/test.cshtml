@model testing.Models.AdminManageModels.Routes
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<!DOCTYPE html>
<html>
<head>
    <title>Place Autocomplete</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">

    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 550px;
        }
        .input-box {
            border: 1px solid transparent;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            padding: 10px 15px 10px 13px;
            text-overflow: ellipsis;
            width: 100%;
            margin-top:8px;
        }
        .controls {
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            display: inline-block;
        }
        /* Optional: Makes the sample page fill the window. */
        /*html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        

        .form-group {
            margin-top: 60px;
            height: 32px;
            display: inline-block;
        }

        #origin-input,
        #destination-input,
        #way-points,
        #route {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 15px 0 13px;
            text-overflow: ellipsis;
            width: 200px;
        }

            #origin-input:focus,
            #destination-input:focus,
            #way-points:focus #route:focus {
                border-color: #4d90fe;
            }
            */
        #mode-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #mode-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }
    </style>
</head>
<body>
    <script src="~/js/site.js"></script>
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <div id="bus-number" class="form-group">
                    <span asp-validation-for="busNumber" class="text-danger"></span>
                    <div class="dropdown">
                        <select name="bus" id="bus" class="selectpicker" data-width="120px" title="Bus Number">
                            <option value="BUS1" id="bus1">1</option>
                            <option value="BUS2" id="bus2">2</option>
                            <option value="BUS3" id="bus3">3</option>
                            <option value="BUS4" id="bus4">4</option>
                            <option value="BUS5" id="bus5">5</option>
                            <option value="BUS6" id="bus6">6</option>
                            <option value="BUS7" id="bus7">7</option>

                        </select>
                    </div>
                </div>
            </div>

            

        </div>
        <div class="row">

            <div class="col-md-3">
                <input asp-for="routeName" id="route" class="input-box" type="text"
                       placeholder="Enter a Route name" />
                <span asp-validation-for="routeName" class="text-danger"></span>
            </div>
            <div class="col-md-3">
                <input id="origin-input" class="input-box" type="text"
                       placeholder="Enter an origin location">                
            </div>
            <div class="col-md-3">
                <input id="destination-input" class="input-box" type="text"
                       placeholder="Enter a destination location">
            </div>

            <div class="col-md-3">
                <div id="dynamicInput" class="form-group">

                    <input id="way-points" name="waypoints" class="input-box" type="text"
                           placeholder="Enter a waypoint location">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-offset-9 col-md-3">
                <input type="button" value="Add another waypoint location"
                       class="controls" onClick="addInput('dynamicInput');">
            </div>
            

        </div>
        <div class="row">
            <div id="mode-selector" class="controls">
                <input type="radio" name="type" id="changemode-walking">
                <label for="changemode-walking">Walking</label>

                <input type="radio" name="type" id="changemode-transit">
                <label for="changemode-transit">Transit</label>

                <input type="radio" name="type" id="changemode-driving" checked = "checked">
                <label for="changemode-driving">Driving</label>
            </div>
            <div id="map"></div>
            
        </div>
    </div>
    <script>
        var dbRef = firebase.database().ref().child('Routes');
        var counter = 1;
        var i = 0;
        var dt = new Date();
        var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();

        function initMap() {
            latlng = { lat: 33.6500053, lng: 73.1556737 };

            map = new google.maps.Map(document.getElementById('map'), {

                zoom: 10,
                center: latlng
            });

            new AutocompleteDirectionsHandler(map);
        }

        function addInput(divName) {
            var newbr = document.createElement('br');
            var newWaypointInput = document.createElement('input');
            newWaypointInput.setAttribute("name", "waypoints");
            newWaypointInput.setAttribute("type", "text");
            newWaypointInput.setAttribute("id", "way-points");
            newWaypointInput.setAttribute("class", "input-box");

            document.getElementById(divName).appendChild(newbr);
            document.getElementById(divName).appendChild(newWaypointInput);
            counter++;
            i++;
            console.log("cntr=" + counter + " i=" + i + " waypoints[].length=" + document.getElementsByName("waypoints"));
            var autocompletew = new google.maps.places.Autocomplete(newWaypointInput);
        }

        function AutocompleteDirectionsHandler(map) {
            this.map = map;
            this.originPlaceId = null;
            this.originLatlng = null;
            this.destinationPlaceId = null;
            this.waypointPlaceId = null;
            this.newWaypointPlaceId = null;
            this.travelMode = 'DRIVING';
            var originInput = document.getElementById('origin-input');
            var destinationInput = document.getElementById('destination-input');
            var waypointInput = document.getElementsByName('waypoints');
            var modeSelector = document.getElementById('mode-selector');
            this.directionsService = new google.maps.DirectionsService;
            this.directionsDisplay = new google.maps.DirectionsRenderer;
            this.directionsDisplay.setMap(map);

            var originAutocomplete = new google.maps.places.Autocomplete(
                originInput, { placeIdOnly: true });
            var destinationAutocomplete = new google.maps.places.Autocomplete(
                destinationInput, { placeIdOnly: true });

            for (var i = 0; i < waypointInput.length; i++) {

                var inputw = waypointInput[i];
                //console.log("length: " + waypointInput.length + "inputw" + inputw);
                var waypointAutocomplete = new google.maps.places.Autocomplete(inputw);
            }

            this.setupClickListener('changemode-walking', 'WALKING');
            this.setupClickListener('changemode-transit', 'TRANSIT');
            this.setupClickListener('changemode-driving', 'DRIVING');

            this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
            this.setupPlaceChangedListener(waypointAutocomplete, 'DEST1');
            this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(waypointInput);
            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
        }

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        AutocompleteDirectionsHandler.prototype.setupClickListener = function (id, mode) {
            var radioButton = document.getElementById(id);
            var me = this;
            radioButton.addEventListener('click', function () {
                me.travelMode = mode;
                me.route();
            });
        };


        AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
            var me = this;
            autocomplete.bindTo('bounds', this.map);
            autocomplete.addListener('place_changed', function () {
                var place = autocomplete.getPlace();
                if (!place.place_id) {
                    window.alert("Please select an option from the dropdown list.");
                    return;
                }
                if (mode === 'ORIG') {
                    me.originPlaceId = place.place_id;
                } else if (mode === 'DEST1') {

                    me.waypointPlaceId = place.place_id;
                }

                else {
                    me.destinationPlaceId = place.place_id;
                }
                me.route();
            });

        };

        AutocompleteDirectionsHandler.prototype.route = function () {
            var waypts = [];
            var checkboxArray = document.getElementById('dynamicInput');
            var waypointElmts = document.getElementsByName('waypoints');
            for (var i = 0; i < waypointElmts.length; i++) {
                if (waypointElmts[i].value.length > 0) {
                    waypts.push({
                        location: waypointElmts[i].value,
                        stopover: true
                    });
                }
            }

            if (!this.originPlaceId || !this.destinationPlaceId) {
                return;
            }
            var me = this;

            this.directionsService.route({
                origin: { 'placeId': this.originPlaceId },
                waypoints: waypts,
                optimizeWaypoints: true,
                destination: { 'placeId': this.destinationPlaceId },
                travelMode: this.travelMode

            }, function (response, status) {
                if (status === 'OK') {
                    me.directionsDisplay.setDirections(response);
                    console.log("OK");

                    dbRef.push({
                        busnumber: $("#bus option:selected").text(),
                        routeNumber: document.querySelector('#route').value,
                        source: document.querySelector('#origin-input').value,
                        destination: document.querySelector('#destination-input').value,
                        waypoints: waypts,
                        date: dt.toDateString(),
                        time: time
                    });
                    console.log(dbRef.push);

                } else {
                    window.alert('Directions request failed due to ' + status);
                } 
             });
            
        };


    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAdb029V9A9X7dpFqtrGzzRijdzrzqMRVA&libraries=places&callback=initMap">
    </script>
</body>
</html>
